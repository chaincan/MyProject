package message;

option java_package = "com.test.message";
option java_multiple_files = true;//生成的message文件是多个，在一个包下，否则是一个包装类
option optimize_for = LITE_RUNTIME;
//Protocol Buffer定义三种优化级别SPEED/CODE_SIZE/LITE_RUNTIME。缺省情况下是SPEED。
//SPEED: 表示生成的代码运行效率高，但是由此生成的代码编译后会占用更多的空间。
//CODE_SIZE: 和SPEED恰恰相反，代码运行效率较低，但是由此生成的代码编译后会占用更少的空间，通常用于资源有限的平台，如Mobile。
//LITE_RUNTIME: 生成的代码执行效率高，同时生成代码编译后的所占用的空间也是非常少。这是以牺牲Protocol Buffer提供的反射功能为代价的。
// SPEED和LITE_RUNTIME相比，在于调试级别上，例如 msg.SerializeToString(&str) 在SPEED模式下会利用反射机制打印出详细字段和字段值，但是LITE_RUNTIME则仅仅打印字段值组成的字符串;

message RequestDataMsg1
{
	required int32 id = 1;
	optional string dataType = 2;
}
message StringIntegerMap
{
	required string dataName = 1;
	required int32 data = 2;
}
message ResponseDataMsg2
{
	repeated StringIntegerMap dataMap = 1;
}
